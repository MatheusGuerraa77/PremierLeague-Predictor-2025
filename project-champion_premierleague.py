import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import random

# ---- CONFIGURA√á√ïES ----
st.set_page_config(page_title="Premier League Predictor 2025", layout="wide")

# ----  CARREGANDO OS DADOS  ----
@st.cache_data
def load_data():
    df = pd.read_csv("PremierDB.csv", delimiter=";")
    return df

df = load_data()

# ---- CABE√áALHO ----
st.title("üèÜ Premier League Predictor 2025")
st.markdown("Acompanhe a **classifica√ß√£o**, **confrontos diretos**, **hist√≥rico de jogos** e **simula√ß√µes de t√≠tulo**.")

# ---- VISUALIZA√á√ÉO DA TABELA ----
st.subheader("üìä Classifica√ß√£o Atual")
st.dataframe(df.style.format({"Pts/PPJ": "{:.2f}", "xGD/90": "{:.2f}"}))

# ---- GR√ÅFICO DE PONTUA√á√ÉO ----
st.subheader("üî¢ Pontua√ß√£o dos Times")
fig = px.bar(df.sort_values(by="Pt", ascending=True), x="Pt", y="Equipe", orientation="h", text="Pt",
             color="Pt", color_continuous_scale="blues")
st.plotly_chart(fig, use_container_width=True)

# ---- CONFRONTOS RESTANTES ----
st.subheader("‚öΩ Confrontos Diretos Restantes")

# Simula√ß√£o b√°sica de confrontos
teams = df["Equipe"].tolist()
random.shuffle(teams)
confrontos_restantes = [(teams[i], teams[i+1]) for i in range(0, len(teams)-1, 2)]
confrontos_df = pd.DataFrame(confrontos_restantes, columns=["Time A", "Time B"])
st.table(confrontos_df)

# ---- HIST√ìRICO DE DESEMPENHO ----
st.subheader("üìà Hist√≥rico dos √öltimos 5 Jogos")

historico = df[["Equipe", "√öltimos 5"]].copy()
historico["Vit√≥rias"] = historico["√öltimos 5"].apply(lambda x: x.count("V"))
historico["Empates"] = historico["√öltimos 5"].apply(lambda x: x.count("E"))
historico["Derrotas"] = historico["√öltimos 5"].apply(lambda x: x.count("D"))

fig_hist = px.bar(historico, x="Equipe", y=["Vit√≥rias", "Empates", "Derrotas"], barmode="group",
                  title="Resultados dos √öltimos 5 Jogos", labels={"value": "Jogos", "variable": "Resultado"})
st.plotly_chart(fig_hist, use_container_width=True)

# ---- SIMULA√á√ÉO DE T√çTULO ----
st.subheader("üìä Simula√ß√£o de Probabilidades de T√≠tulo")

# Modelo aprimorado de simula√ß√£o usando Poisson
def simulate_champion(df, num_simulations=10000):
    df = df.copy()
    
    # Garantir que xGD/90 seja num√©rico e tratar valores ausentes
    df["xGD/90"] = pd.to_numeric(df["xGD/90"], errors="coerce").fillna(0)

    champions = []
    for _ in range(num_simulations):
        df["Simulated Points"] = df["Pt"] + np.random.poisson(lam=np.maximum(df["xGD/90"], 0) * 5)
        champion = df.loc[df["Simulated Points"].idxmax(), "Equipe"]
        champions.append(champion)
    
    # Criar um DataFrame com as probabilidades
    prob_df = pd.DataFrame(df["Equipe"])
    prob_df["Probabilidade (%)"] = prob_df["Equipe"].apply(lambda team: (champions.count(team) / num_simulations) * 100)

    return prob_df.sort_values(by="Probabilidade (%)", ascending=False)

# Executar a simula√ß√£o
probabilidades = simulate_champion(df)

# Exibir todas as probabilidades na interface
st.dataframe(probabilidades.style.format({"Probabilidade (%)": "{:.2f}%"}))

# Criar gr√°fico de pizza para exibir a distribui√ß√£o de probabilidades de todos os times
fig_pie = px.pie(
    probabilidades,
    names="Equipe",
    values="Probabilidade (%)",
    title="Probabilidades de Cada Time Ganhar o Campeonato",
    color="Equipe",
    hole=0.3  # Criar um efeito de "rosca" para melhor legibilidade
)

st.plotly_chart(fig_pie, use_container_width=True)

# ---- EXIBI√á√ÉO DE CONCLUS√ïES ----
st.markdown("### üîé Conclus√µes")
st.markdown("- **Favoritos ao t√≠tulo**: Os times com maior fatia no gr√°fico possuem mais chances.")
st.markdown("- **Os confrontos diretos podem mudar a classifica√ß√£o.**")
st.markdown("- **√öltimos jogos s√£o decisivos na proje√ß√£o do t√≠tulo.**")

# ---- FINALIZA√á√ÉO ----
st.markdown("‚öΩ Criado por Matheus Guerra. Dados fict√≠cios com base na temporada 2025.")
